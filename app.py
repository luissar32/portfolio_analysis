# -*- coding: utf-8 -*-
"""portfolio-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zkwwUE2zWRak5oh-SNLMXGeXqq-mcPrz
"""



import yfinance as yf
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.io as pio
import time


# Verificar versiones
print("Versión de yfinance:", yf.__version__)
print("Versión de pandas:", pd.__version__)

# Verificar que yf.download es una función
print("Tipo de yf.download:", type(yf.download))

# Configuración de la cartera
tickers = ['AAPL', 'MSFT', 'GOOGL', 'TSLA']
weights = np.array([0.25, 0.25, 0.25, 0.25])
start_date = '2023-01-01'
end_date = '2025-05-01'
retry_wait = 1  # Retardo entre solicitudes

# Descargar datos históricos de cada acción
data_frames = []
for ticker in tickers:
    try:
        print(f"Descargando datos para {ticker}...")
        # Descargar datos
        stock_data = yf.download(ticker, start=start_date, end=end_date, auto_adjust=True, progress=True)

        # Depuración: inspeccionar stock_data
        print(f"Tipo de stock_data: {type(stock_data)}")
        if isinstance(stock_data, pd.DataFrame):
            print(f"Columnas de stock_data: {stock_data.columns.tolist()}")
            print(f"Primeras filas:\n{stock_data.head()}")
        else:
            print(f"stock_data no es un DataFrame: {stock_data}")
            continue

        # Verificar si el DataFrame está vacío
        if stock_data.empty:
            print(f"No se encontraron datos para {ticker}.")
            continue

        # Verificar si las columnas son un multiíndice
        if isinstance(stock_data.columns, pd.MultiIndex):
            # Acceder a la columna 'Close' usando el multiíndice
            if ('Close', ticker) not in stock_data.columns:
                print(f"Columna ('Close', {ticker}) no encontrada. Columnas disponibles: {stock_data.columns.tolist()}")
                continue
            close_data = stock_data[('Close', ticker)]
        else:
            # Caso sin multiíndice (por si cambia en el futuro)
            if 'Close' not in stock_data.columns:
                print(f"Columna 'Close' no encontrada. Columnas disponibles: {stock_data.columns.tolist()}")
                continue
            close_data = stock_data['Close']

        # Verificar que close_data es una Series
        if not isinstance(close_data, pd.Series):
            print(f"close_data no es una Series para {ticker}: {type(close_data)}")
            continue

        # Renombrar la serie con el ticker
        data_frames.append(close_data.rename(ticker))
        print(f"Datos para {ticker} descargados y procesados correctamente.")
        time.sleep(retry_wait)
    except Exception as e:
        print(f"Error al descargar {ticker}: {str(e)}")
        time.sleep(retry_wait)

# Combinar los datos en un solo DataFrame
if not data_frames:
    print("No se descargaron datos válidos. No se generará index.html.")
else:
    data = pd.concat(data_frames, axis=1)
    print("Datos combinados:\n", data.head())

    # Calcular rendimientos diarios
    returns = data.pct_change().dropna()
    if returns.empty:
        print("No hay datos suficientes para calcular métricas. No se generará index.html.")
    else:
        # Calcular rendimientos de la cartera
        portfolio_returns = (returns * weights).sum(axis=1)
        cumulative_returns = (1 + portfolio_returns).cumprod() - 1
        annualized_return = portfolio_returns.mean() * 252
        volatility = portfolio_returns.std() * np.sqrt(252)
        risk_free_rate = 0.03
        sharpe_ratio = (annualized_return - risk_free_rate) / volatility

        # Crear gráfico con Plotly
        fig = px.line(cumulative_returns, title='Rendimiento Acumulado de la Cartera')
        fig.update_layout(xaxis_title='Fecha', yaxis_title='Rendimiento')

        # Generar archivo HTML
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Análisis de Cartera</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                h1 {{ color: #333; }}
                .metrics {{ margin-bottom: 20px; }}
            </style>
        </head>
        <body>
            <h1>Análisis de Cartera de Acciones</h1>
            <div class="metrics">
                <p><strong>Rendimiento Anualizado:</strong> {annualized_return:.2%}</p>
                <p><strong>Volatilidad Anualizada:</strong> {volatility:.2%}</p>
                <p><strong>Ratio Sharpe:</strong> {sharpe_ratio:.2f}</p>
            </div>
            <div>{pio.to_html(fig, full_html=False)}</div>
        </body>
        </html>
        """

        # Guardar el archivo HTML
        with open('index.html', 'w', encoding='utf-8') as f:
            f.write(html_content)

        print("Archivo index.html generado correctamente.")

